#!/usr/bin/env python3
"""
Script to regenerate missing predictions
Generated automatically from missing indices analysis

Missing indices: 21 total
Indices: [44, 52, 186, 221, 227, 253, 316, 325, 349, 376, 389, 390, 415, 423, 436, 478, 501, 506, 518, 571]...
"""

import json

def load_missing_questions(ground_truth_file: str, missing_indices: list):
    """Load questions that need predictions"""
    with open(ground_truth_file, 'r', encoding='utf-8') as f:
        gt_data = json.load(f)

    missing_questions = []
    for idx in missing_indices:
        if idx < len(gt_data) and gt_data[idx]:
            item = gt_data[idx]
            missing_questions.append({
                'index': idx,
                'question': item.get('question', item.get('prompt', '')),
                'choices': item.get('choices', []),
                'ground_truth': item.get('answer', '')
            })

    return missing_questions

def main():
    ground_truth_file = "dataset/truth_teller_liar_questions.json"
    missing_indices = [44, 52, 186, 221, 227, 253, 316, 325, 349, 376, 389, 390, 415, 423, 436, 478, 501, 506, 518, 571, 643]

    print(f"Loading {len(missing_indices)} missing questions...")
    questions = load_missing_questions(ground_truth_file, missing_indices)

    print(f"Found {len(questions)} questions to process")

    # TODO: Add your model inference code here
    # Process each question in the questions list
    # Generate predictions and save them

    # Example structure for results:
    results = []
    for q in questions:
        # Your model prediction code here
        prediction = "A"  # Replace with actual model call

        results.append({
            'index': q['index'],
            'answer': prediction,
            'reasoning': 'Generated by rerun script'
        })

    # Save results
    with open('missing_predictions.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)

    print(f"Saved {len(results)} predictions to missing_predictions.json")

if __name__ == "__main__":
    main()
